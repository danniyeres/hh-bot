import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from keyboards import reply
from states.user_states import ResponseStates
import requests
from utils import api

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("response"))
async def start_response(message: types.Message, state: FSMContext):
    try:
        await message.answer(
            "üîç –í–≤–µ–¥–∏—Ç–µ search_text (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Java Developer'):",
            reply_markup=reply.cancel_button
        )
        await state.set_state(ResponseStates.waiting_for_search_text)
    except Exception as e:
        logger.error(f"Error in start_response: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(ResponseStates.waiting_for_search_text)
async def process_search_text(message: types.Message, state: FSMContext):
    try:
        if not message.text:
            await message.answer(
                "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=reply.cancel_button
            )
            return

        if message.text == "–û—Ç–º–µ–Ω–∞":
            await cancel_handler(message, state)
            return

        await state.update_data(search_text=message.text)
        await message.answer(
            "üìå –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–ª–º–∞—Ç—ã'):",
            reply_markup=reply.cancel_button
        )
        await state.set_state(ResponseStates.waiting_for_city)
    except Exception as e:
        logger.error(f"Error in process_search_text: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(ResponseStates.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    try:
        if message.text == "–û—Ç–º–µ–Ω–∞":
            await cancel_handler(message, state)
            return

        city_name = message.text.strip()
        area_id = api.get_area_id(city_name)

        if not area_id:
            await message.answer(
                f"‚ùå –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=reply.cancel_button
            )
            return

        await state.update_data(city=city_name, area_id=area_id)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
            reply_markup=reply.cancel_skip_button
        )
        await state.set_state(ResponseStates.waiting_for_message)

    except Exception as e:
        logger.error(f"Error in process_city: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )



@router.message(ResponseStates.waiting_for_message)
async def process_message(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        search_text = data.get("search_text")
        city_name = data.get("city")
        area_id = data.get("area_id")

        if message.text in ["–û—Ç–º–µ–Ω–∞", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]:
            if message.text == "–û—Ç–º–µ–Ω–∞":
                await cancel_handler(message, state)
                return
            else:
                message_text = "null"
        else:
            message_text = message.text.strip()

        await message.answer("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫...")
        logger.info(
            f"–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} "
            f"–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º '{search_text}' –∏ –≥–æ—Ä–æ–¥–æ–º '{city_name}' (ID: {area_id})"
        )

        response = requests.post(
            api.send_response_url(),
            params={
                "telegram_id": message.from_user.id,
                "search_text": search_text,
                "area": area_id,
                "message": message_text
            },
            timeout=10
        )

        if response.status_code == 200:
            await message.answer(
                f"‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! (–ì–æ—Ä–æ–¥: {city_name}, ID: {area_id})",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ (–∫–æ–¥ {response.status_code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )

    except Exception as e:
        logger.error(f"Error in process_message: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"Error in cancel_handler: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )


from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.user_states import ResponseStates
import requests
from utils import api

router = Router()

@router.message(Command("response"))
async def start_response(message: types.Message, state: FSMContext):
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ search_text (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Python'):")
    await state.set_state(ResponseStates.waiting_for_search_text)

@router.message(ResponseStates.waiting_for_search_text)
async def process_search_text(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(search_text=message.text)
    await message.answer("üìå –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ area (–Ω–∞–ø—Ä–∏–º–µ—Ä, 40):")
    await state.set_state(ResponseStates.waiting_for_area)

@router.message(ResponseStates.waiting_for_area)
async def process_area(message: types.Message, state: FSMContext):
    try:
        area = int(message.text)
    except ValueError:
        await message.answer("‚ùå Area –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    data = await state.get_data()
    search_text = data.get("search_text")

    url = api.send_response()
    user_id = message.from_user.id
    response = requests.post(url,params={"telegram_id": user_id, "search_text": search_text, "area": area})
    await message.answer("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫...")

    if response.status_code == 200:
        await message.answer("‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()